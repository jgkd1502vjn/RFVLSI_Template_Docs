group HFSSTemplate;

warning(line, msg) ::= "WARNING at Line:(<line>):<msg>"

prog(commentRedudantID, decl_local_var, stats) ::= <<
' This source code is generated by NCTU RFVLSI Lab SKILL -> HFSS VBscript translator.
' This SKILL/HFSS VBsciprt Translator is a intellectual property of RFVLSI Lab, NCTU, Taiwan
' All rights reserved. 2012. Confidential, and intended for internal use only. 

<decl_local_var>
<commentRedudantID>
<stats>
>>
print_let(local_redudant_id, decl_local_var, stats) ::=<<
' content of let-statement	
	<local_redudant_id>
	<decl_local_var>
	<stats>
>>

print(content)::= "<content; separator=\"\">"
print_comment(content) ::= <<
' <content>

>>

println(content) ::= <<
<content; separator="\n">
>>

printArgs(content) ::= <<
<content; separator=", ">
>>

printOneArg(arg, value)::= <<
<arg> 
>>
 
declareLocalVar(ids) ::= <<
' local variable declarations
>>

commentRedudantID(ids)::=<<
<if(ids)>
'Redudant ID at current scope: <ids; separator=", ">
<endif>
>>
print_if_stat(cond, then_stats, else_stats) ::=<<
<if(else_stats)>

If (<cond>) Then
	<then_stats>
Else
	<else_stats>
End If

<else>

If (<cond>) Then
	<then_stats>
End If

<endif>
>>

print_when_stat(cond_expr, stats)::=<<
While <cond_expr>
	<stats>
Wend
>>

print_unless_stat(cond_expr, stats)::=<<
"UNLESS" statement not supported by VBScripted. Deliberate Error Generated Here!!
>>

print_for_stat(iterator, start_expr, end_expr, stats)::=<<

For <iterator> = (<start_expr>) to (<end_expr>)
	<stats>
Next

>>


print_CPoly(metalIndex,XArray,YArray)::=<<
CMetalPolygon <metalIndex>, _
	Array(_
		<XArray>), _
	Array(_
		<YArray>) 

>>

print_CRect(viaIndex, metalIndex, originX, originY, width, len, numX, numY, spaceX, spaceY)::=<<
<if(metalIndex)>CMetalRect rfvlsiHFSS_newORIENT(hfss_pcellOffsetORIENT, rfvlsiHFSS_ORIENT_R0), _
	<metalIndex>, _ 
	rfvlsiHFSS_newOriginX(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <originX>, <originY>, hfss_ORIENT_R0), _ 
	rfvlsiHFSS_newOriginY(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <originX>, <originY>, hfss_ORIENT_R0), _ 
	<width>, <len>, <numX>, <numY>, <spaceX>, <spaceY>	
<endif>
<if(viaIndex)>CViaRect rfvlsiHFSS_newORIENT(hfss_pcellOffsetORIENT, rfvlsiHFSS_ORIENT_R0), _ 
	<viaIndex>, _ 
	rfvlsiHFSS_newOriginX(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <originX>, <originY>, hfss_ORIENT_R0), _ 
	rfvlsiHFSS_newOriginY(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <originX>, <originY>, hfss_ORIENT_R0), _ 
	<width>, <len>, <numX>, <numY>, <spaceX>, <spaceY>
<endif>	
<if(!metalIndex)><if(!viaIndex)>
'Non-metal or non-via layer, skipped for HFSS translation.
<endif><endif>
>>

print_assign(id, operator, expr) ::=<<
<if(expr)><if(id)><id> <operator> <endif><expr>
<else>
'no corresponding for assigning <id> with specified function in HFSS, thus skipped translation.
<endif>
>>

chain_expression(expr1,op ,expr2) ::=<<
<expr1><if(expr2)><op><expr2;separator=op><endif>
>>

unary_operator_expression(op,expr) ::=<<
(<op><expr>)
>>
binary_operator_expression(op,expr1,expr2) ::=<<
(<expr1><op><expr2>)
>>

multiplicative_expression(op,expr1,expr2) ::=<<
(<expr1>)<op>(<expr2>)
>>

translateDefinePCell_funcall(cellID, args, content)::=<<
Sub rfvlsiHFSS_Create_<cellID>(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <args>)
	<content>
End Sub
>>
print_namedparam_list(params)::=<<
<params;separator=", ">
>>
print_param_list(params)::=<<
<params;separator=", ">
>>
print_bothparam_list(params, namedparams)::=<<
<params;separator=", "><if(params)><if(namedparams)>, <endif><endif><namedparams;separator=", ">
>>
print_func_bothparams(id, params, namedparams)::=<<
<id>(<params;separator=", "><if(params)><if(namedparams)>, <endif><endif><namedparams;separator=", ">)
>>

print_func_params(id, params)::=<<
<id>(<params>)
>>
print_func_namedparams(id, params)::=<<
<id>(<params>)
>>

print_list(content)::=<<
list(<content;separator=", ">)
>>

print_function_def(funcName,args,stats,returnExpr)::=<<

Function <funcName>(<args;separator=", ">)
	<stats>
	<funcName> = <returnExpr>
End Function

>>

print_switch_stat(conID,cases)::=<<
Select Case <conID>
	<cases>
End Select
>>

print_case_atom(caseExpr,stats)::=<<
Case <caseExpr; separator=", ">
	<stats>
>>
print_dbCreateParamInst(cellname, instOriginX, instOriginY, instOrient,params)::=<<
rfvlsiHFSS_Create_<cellname> rfvlsiHFSS_newOriginX(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <instOriginX>, <instOriginY>, hfss_ORIENT_<instOrient>), _
	rfvlsiHFSS_newOriginY(hfss_pcellOffsetX0, hfss_pcellOffsetY0, hfss_pcellOffsetORIENT, <instOriginX>, <instOriginY>, hfss_ORIENT_<instOrient>), _	
	rfvlsiHFSS_newORIENT(hfss_pcellOffsetORIENT, hfss_ORIENT_<instOrient>)<if(params)>,<endif> _
	<if(params)><params><endif>

>>