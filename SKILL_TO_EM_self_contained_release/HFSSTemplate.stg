group HFSSTemplate;

warning(line, msg) ::= "WARNING at Line:(<line>):<msg>"

prog(commentRedudantID, decl_local_var, stats) ::= <<

' This source code is generated by NCTU RFVLSI Lab SKILL -> HFSS VBscript translator.
' This SKILL/HFSS VBsciprt Translator is a intellectual property of RFVLSI Lab, NCTU, Taiwan
' All rights reserved. 2012-2013. Confidential, and intended for internal use only. 

<decl_local_var>
<commentRedudantID>
<stats>

>>
print_let(local_redudant_id, decl_local_var, stats) ::=<<
' content of let-statement	
	<local_redudant_id>
	<decl_local_var>
	<stats>
>>

print(content) ::= <<
<content; separator="\n">
>>

print_comment(content) ::= <<
' <content>
>>
print_cellID(content) ::= <<
'|cellID:<content>|
>>

print_paren(content) ::= <<
(<content>)
>>

printArgs(content) ::= <<
<content; separator=", ">
>>

printOneArg(arg, value)::= <<
ByVal <arg> 
>>
 
declareLocalVar(ids) ::= <<
' local variable declarations
>>

commentRedudantID(ids)::=<<
<if(ids)>
'Redudant ID at current scope: <ids; separator=", ">
<endif>
>>

print_if_stat(cond, then_stats, else_stats) ::=<<
<if(else_stats)>
If (<cond>) Then
	<then_stats>
Else
	<else_stats>
End If
<else>
If (<cond>) Then
	<then_stats>
End If
<endif>
>>

print_when_stat(cond_expr, stats)::=<<
While <cond_expr>
	<stats>
Wend
>>

print_unless_stat(cond_expr, stats)::=<<
"UNLESS" statement not supported by VBScripted. Deliberate Error Generated Here!!
>>

print_for_stat(iterator, start_expr, end_expr, stats)::=<<

For <iterator> = (<start_expr>) to (<end_expr>)
	<stats>
Next

>>

print_foreach_stat(iterator, collection, stats)::=<<
For Each <iterator> In <collection>
	<stats>
Next
 >>
switch_stat(cond,then_stats, else_stats) ::=<<
Select Case <cond>

End Select

>>
print_CPoly(metalIndex, viaIndex, XArray,YArray)::=<<
<if(metalIndex)>
CMetalPolygon <metalIndex>, _
	rfvlsiHFSS_ThicknessFactor(rfvlsi_PCellOffsetORIENT), _
	Array(_
		<XArray>), _
	Array(_
		<YArray>) 
<endif>
<if(viaIndex)>
CViaPolygon <viaIndex>, _
	rfvlsiHFSS_ThicknessFactor(rfvlsi_PCellOffsetORIENT), _
	Array(_
		<XArray>), _
	Array(_
		<YArray>) 
<endif>
>>

print_XArray(XCorrected)::=<<
<XCorrected;separator=",_ \n">
>>

print_YArray(YCorrected)::=<<
<YCorrected;separator=",_ \n">
>>

print_XCorrected(XY)::=<<
rfvlsi_newOriginX(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <XY> , rfvlsi_ORIENT_R0)
>>
print_YCorrected(XY)::=<<
rfvlsi_newOriginY(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <XY> , rfvlsi_ORIENT_R0)
>>
print_XY(X,Y)::=" <X> , <Y>"

print_CRect(viaIndex, metalIndex, originX, originY, width, len, numX, numY, spaceX, spaceY)::=<<
<if(metalIndex)>CMetalRect rfvlsi_newORIENT(rfvlsi_PCellOffsetORIENT, rfvlsi_ORIENT_R0), _
	<metalIndex>, _ 
	rfvlsi_newOriginX(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <originX>, <originY>, rfvlsi_ORIENT_R0), _ 
	rfvlsi_newOriginY(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <originX>, <originY>, rfvlsi_ORIENT_R0), _ 
	<width>, <len>, <numX>, <numY>, <spaceX>, <spaceY>	
<endif>
<if(viaIndex)>CViaRect rfvlsi_newORIENT(rfvlsi_PCellOffsetORIENT, rfvlsi_ORIENT_R0), _ 
	<viaIndex>, _ 
	rfvlsi_newOriginX(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <originX>, <originY>, rfvlsi_ORIENT_R0), _ 
	rfvlsi_newOriginY(rfvlsi_PCellOffsetX0, rfvlsi_PCellOffsetY0, rfvlsi_PCellOffsetORIENT, <originX>, <originY>, rfvlsi_ORIENT_R0), _ 
	<width>, <len>, <numX>, <numY>, <spaceX>, <spaceY>
<endif>	
<if(!metalIndex)><if(!viaIndex)>
'Non-metal or non-via layer, skipped for HFSS translation.
<endif><endif>
>>

print_assign(id, operator, expr, id_ignored, expr_ignored) ::=<<
<if(expr)><if(id)><id> <operator> <endif><expr><endif><if(id_ignored)>
'( <id_ignored> = )part is not translated, due to <expr_ignored> returns a VOID in HFSS.<endif>
>>

assign_global(id, operator, expr) ::=<<
<if(expr)>
<if(id)><id> <operator> <endif><expr>
<else>
'no corresponding for assigning <id> with specified function in HFSS, thus skipped translation.
<endif>
>>

chain_expression(expr1,op ,expr2) ::=<<
<expr1><if(expr2)><op><expr2;separator=op><endif>
>>

unary_operator_expression(op,expr) ::=<<
(<op>(<expr>))
>>
binary_operator_expression(op,expr1,expr2) ::=<<
(<expr1>)<op>(<expr2>)
>>

multiplicative_expression(op,expr1,expr2) ::=<<
(<expr1>)<op>(<expr2>)
>>

translateDefinePCell_funcall(cellID, args, content)::=<<
Sub rfvlsiHFSS_Create_<cellID>(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <args>)
	<content>
End Sub
>>
print_namedparam_list(params)::=<<
<params;separator=", ">
>>
print_param_list(params)::=<<
<params;separator=", ">
>>
print_bothparam_list(params, namedparams)::=<<
<params;separator=", "><if(params)><if(namedparams)>, <endif><endif><namedparams;separator=", ">
>>
print_func_bothparams(id, params, namedparams)::=<<
<id>(<params;separator=", "><if(params)><if(namedparams)>, <endif><endif><namedparams;separator=", ">)
>>

print_func_params(id, params)::=<<
<id>(<params;separator=", ">)
>>
print_func_namedparams(id, params)::=<<
<id>(<params>)
>>

print_list(content)::=<<
'list(<content;separator=", ">)
>>
print_coord(x,y)::=<<
'coord(x=<x>,y=<y>)
>>

print_function_def(funcName,args,stats,returnExpr)::=<<

Function <funcName>(<args;separator=", ">)
	<stats>
	<funcName> = <returnExpr>
End Function
>>

print_switch_stat(conID,cases)::=<<
Select Case <conID>
	<cases;separator="\n">
End Select

>>
print_case_atom(caseExpr,stats)::=<<
Case <caseExpr; separator=", ">
	<stats>
>>
print_dbCreateParamInst(cellname, instOriginX, instOriginY, instOrient,params)::=<<
rfvlsiHFSS_Create_<cellname> rfvlsi_newOriginX(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>, <instOriginY>, rfvlsi_ORIENT_<instOrient>), _
	rfvlsi_newOriginY(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>, <instOriginY>, rfvlsi_ORIENT_<instOrient>), _	
	rfvlsi_newORIENT(rfvlsi_pcellOffsetORIENT, rfvlsi_ORIENT_<instOrient>)<if(params)>,_
	<params; separator=", "><endif>

>>

print_dbCreateParamSimpleMosaic(cellname, instOriginX, instOriginY, instOrient,numX, numY, spaceX, spaceY,params)::=<<
For iXCreateBox=0 To (<numX>-1) 
    For iYCreateBox=0 To (<numY>-1)
        
        rfvlsiHFSS_Create_<cellname> rfvlsi_newOriginX(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>+iXCreateBox*(<spaceX>), <instOriginY>+iYCreateBox*(<spaceY>), rfvlsi_ORIENT_<instOrient>), _
                rfvlsi_newOriginY(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>+iXCreateBox*(<spaceX>), <instOriginY>+iYCreateBox*(<spaceY>), rfvlsi_ORIENT_<instOrient>), _	
                rfvlsi_newORIENT(rfvlsi_pcellOffsetORIENT, rfvlsi_ORIENT_<instOrient>)<if(params)>,_
                <params; separator=", "><endif>
                
    Next
Next
>>

print_DummyCreateParamInst(cellname, instOriginX, instOriginY, instOrient,params, priority)::=<<

'Creating Dummy Structure for EM simulation.  This part will not be used in PCell, but only in EM Simulation
If (rfvlsi_em_sim_piority\<=<priority>) Then
rfvlsiHFSS_Create_<cellname> rfvlsi_newOriginX(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>, <instOriginY>, rfvlsi_ORIENT_<instOrient>), _
	rfvlsi_newOriginY(rfvlsi_pcellOffsetX0, rfvlsi_pcellOffsetY0, rfvlsi_pcellOffsetORIENT, <instOriginX>, <instOriginY>, rfvlsi_ORIENT_<instOrient>), _	
	rfvlsi_newORIENT(rfvlsi_pcellOffsetORIENT, rfvlsi_ORIENT_<instOrient>)<if(params)>,_
	<params; separator=", "><endif>
        
End If

>>

file_extension(cell)::=<<
rfvlsiHFSS_Create_<cell>.vbs
>>
OR(id)::=<<
 OR 
>>
AND(id)::=<<
 AND 
>>
XOR(id)::=<<
 XOR 
>>
NOT(id)::=<<
NOT 
>>
EQUAL_OP(id)::=<<
=
>>
NONEQUAL_OP(id)::=<<
\<>
>>
LongLineChar(cell)::=<<
_
>>
print_string(content)::=<<
"<content>"
>>
BoolTrue()::=<<
True
>>
BoolFalse()::=<<
False
>>
CaseDefault()::=<<
Else
>>

print_Header_project(savefile_path, active_design_name)::=<<
' Begining Technology-dependent Codes
' All number in um. 
' RF-VLSI Lab, National Chiao-Tung University.
' All Rights Reserved, 2012

Dim oAnsoftApp
Dim oDesktop
Dim oProject
Dim oDesign
Dim oEditor
Dim oModule
Set oAnsoftApp = CreateObject("AnsoftHfss.HfssScriptInterface")
Set oDesktop = oAnsoftApp.GetAppDesktop()
oDesktop.RestoreWindow
oDesktop.NewProject
'oDesktop.OpenProject "F:\Dropbox\ANTLR\HFSS_API\examples\T65_SYM_2T\nominal.hfss"
Set oProject = oDesktop.GetActiveProject

oProject.InsertDesign "HFSS","<active_design_name>", "DrivenModal", ""
Set oDesign = oProject.SetActiveDesign("<active_design_name>")
Set oEditor = oDesign.SetActiveEditor("3D Modeler")

oProject.SaveAs "@savefile_path@.hfss", true

>>

print_Header_define_project_property(prop_name, prop_value)::=<<
'Defining a new project property which can be used in sweep simulation 
oProject.ChangeProperty Array("NAME:AllTabs", Array("NAME:ProjectVariableTab", Array("NAME:PropServers",  _
  "ProjectVariables"), Array("NAME:ChangedProps", Array("NAME:<prop_name>", "Value:=", "<prop_value>um"))))
>>

print_Vport(portName, X1,Y1, X2,Y2,Width, Axis, iMetalStart, iMetalStop, priority)::=<<
'Adding a vertical lumped port.
CVport "<portName>",<X1>,<Y1>,<X2>,<Y2>,<Width>,"<Axis>",<iMetalStart>,<iMetalStop>,<priority>
>>

print_Hport(portName, X0,Y0, Width, Height, Xi1, Yi1, Xi2,Yi2,iMetal, Axis,priority)::=<<
'Adding a Horizontal lumped port.
CHport "<portName>",<X0>,<Y0>, <Width>, <Xi1>, <Yi1>, <Xi2>,<Yi2>,<iMetal>, "<Axis>",<priority>
>>

print_HportXY(portName, X0,Y0, Width, Height, Xi1, Yi1, Xi2,Yi2,iMetal,priority)::=<<
'Adding a Horizontal lumped port.
CHportXY "<portName>",<X0>,<Y0>, <Width>, <Height>, <Xi1>, <Yi1>, <Xi2>,<Yi2>,<iMetal>,<priority>
>>
print_boundary(X0,Y0,Z0,Xsize,Ysize,Zsize, priority)::=<<
'Create a radiation boundary
CBoundary <X0>,<Y0>,<Z0>,<Xsize>,<Ysize>,<Zsize>, <priority>

>>
print_sim_setup()::=<<

Set oModule = oDesign.GetModule("BoundarySetup")
oModule.AutoIdentifyPorts Array("NAME:Faces", 26981, 27005), false,_
    Array("NAME:ReferenceConductors", "M1"), "1", true
    oProject.Save

>>

print_topcell(topcell, params)::=<<
'Generating topcell
<if(params)>rfvlsiHFSS_Create_<topcell> 0.0, 0.0, rfvlsi_ORIENT_R0, <params; separator=", "> 
<else>rfvlsiHFSS_Create_<topcell> 0.0, 0.0, rfvlsi_ORIENT_R0 <params; separator=", "> <endif>
' End Invoking topcell .... 
oProject.Save

>>

print_sweep_interpolating(FreqStart, FreqStop)::=<<

Set oModule = oDesign.GetModule("AnalysisSetup")
' Setup Interpolating Sweep :
oModule.InsertSetup "HfssDriven", Array("NAME:SP_Sim", "Frequency:=", "50GHz", "PortsOnly:=",  _
  false, "MaxDeltaS:=", 0.02, "UseMatrixConv:=", false, "MaximumPasses:=", 20, "MinimumPasses:=",  _
  1, "MinimumConvergedPasses:=", 1, "PercentRefinement:=", 30, "IsEnabled:=",  _
  true, "BasisOrder:=", -1, "UseIterativeSolver:=", true,"IterativeResidual:=", _
  0.0001, "DoLambdaRefine:=", true, "DoMaterialLambda:=", true, "SetLambdaTarget:=", false, "Target:=",  _
  0.3333, "UseMaxTetIncrease:=", false, "PortAccuracy:=", 2, "UseABCOnPort:=",  _
  false, "SetPortMinMaxTri:=", false, "EnableSolverDomains:=", false, "ThermalFeedback:=",  _
  false, "NoAdditionalRefinementOnImport:=", false)
  
oModule.InsertFrequencySweep "SP_Sim", Array("NAME:SP_Sim_Sweep", "IsEnabled:=", true, "SetupType:=",  _
  "LinearStep", "StartValue:=", Cstr(<FreqStart>)&"GHz", "StopValue:=", Cstr(<FreqStop>)&"GHz", "StepSize:=",  _
  "0.1GHz", "Type:=", "Interpolating", "SaveFields:=", false, "InterpTolerance:=",  _
  0.5, "InterpMaxSolns:=", 250, "InterpMinSolns:=", 0, "InterpMinSubranges:=", 1, "ExtrapToDC:=",  _
  false, "InterpUseS:=", true, "InterpUsePortImped:=", true, "InterpUsePropConst:=",  _
  true, "UseDerivativeConvergence:=", false, "InterpDerivTolerance:=", 0.2, "UseFullBasis:=",  _
  true)

oProject.Save ' Ready for simulation

>>


print_runAll_saveSnP(NumOfPort)::=<<
oDesign.AnalyzeAll 'Run Simulations

Set oModule = oDesign.GetModule("Solutions")
oModule.ExportNetworkData "", Array("SP_Sim:SP_Sim_Sweep"), 3,  _
  "@savefile_path@.s<NumOfPort>p", Array("All"), true, 50, "S", -1, 0, 15
  
oProject.Save
>>

print_batch_runScripts(run_path_command)::=<<
' Begining Technology-dependent Codes
' All number in um. 
' RF-VLSI Lab, National Chiao-Tung University.
' All Rights Reserved, 2012

Dim oAnsoftApp
Dim oDesktop
Dim oProject
Dim oDesign
Dim oEditor
Dim oModule
Set oAnsoftApp = CreateObject("AnsoftHfss.HfssScriptInterface")
Set oDesktop = oAnsoftApp.GetAppDesktop()

<run_path_command;separator="\n">

>>

single_runScript(single_path)::=<<
oDesktop.RunScript "<single_path>"
>>

print_header_process_independent()::=<<
rfvlsi_em_sim_piority = 0

rfvlsi_em_export = 100
rfvlsi_print_DIE=False

Set oEditor = oDesign.SetActiveEditor("3D Modeler")

Function floor(Number)
	floor=Int(Number)
End Function

function Ceil(Number)
    Ceil = Int(Number)
    if Ceil \<> Number then
        Ceil = Ceil + 1
    end if
end function

Function ceiltogrid(Number)
	ceiltogrid=Ceil(Number/rfvlsi_maskgrid)*rfvlsi_maskgrid
End Function

Function floortogrid(Number)
	floortogrid=Floor(Number/rfvlsi_maskgrid)*rfvlsi_maskgrid
End Function

Function pcRound(Number)
	pcRound=Round(Number)
End Function

Function atoi(Number)
	atoi=CInt(Number)
End Function

Function sqrt(Number)
	sqrt=sqr(Number)
End Function

Function Max(Number1, Number2)
	If (Number1>Number2) Then
		Max=Number1
	Else
		Max=Number2
	End If 
End Function

Function Min(Number1, Number2)
	If (Number1\<Number2) Then
		Min=Number1
	Else
		Min=Number2
	End If 
End Function

Function cdfParseFloatString(strFloat)
        value=0.0
        if(Right(strFloat,1)="T") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e12
        Elseif (Right(strFloat,1)="G") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e9
        Elseif (Right(strFloat,1)="M") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e6
        Elseif (Right(strFloat,1)="K") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e3
        Elseif (Right(strFloat,1)="k") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e3
        Elseif (Right(strFloat,1)="m") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-3
        Elseif (Right(strFloat,1)="u") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-6
        Elseif (Right(strFloat,1)="n") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-9
        Elseif (Right(strFloat,1)="p") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-12
        Elseif (Right(strFloat,1)="f") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-15
        Elseif (Right(strFloat,1)="a") Then
                value=CDbl(Left(strFloat,(Len(strFloat)-1)))*1e-18
        Else
                value=CDbl(Left(strFloat,(Len(strFloat))))
        End If
       
       cdfParseFloatString=value
End Function

Function roundtogrid(Number)
	roundtogrid=Round(Number/rfvlsi_maskgrid)*rfvlsi_maskgrid
End Function

''Drawing output functions:
Sub CMetalRect(strORIENT, iMetalIndex, fOriginX, fOriginY, fWidth, fLength, iNumX, iNumY, fSpaceX, fSpaceY)			
	For iXCreateBox=0 To (iNumX-1) 
		For iYCreateBox=0 To (iNumY-1) 
                	if((Len(Cstr(MetalName(iMetalIndex))) \<> 0) AND (fWidth\<>0) AND (fLength\<>0) ) Then
                            oEditor.CreateBox _
                            Array("NAME:BoxParameters", _
                            "XPosition:=", cstr(rfvlsi_newOriginX(fOriginX, fOriginY, strORIENT, (iXCreateBox*(fWidth+fSpaceX)), (iYCreateBox*(fLength+fSpaceY)), rfvlsi_ORIENT_R0))&"um" , _
                            "YPosition:=", cstr(rfvlsi_newOriginY(fOriginX, fOriginY, strORIENT, (iXCreateBox*(fWidth+fSpaceX)), (iYCreateBox*(fLength+fSpaceY)), rfvlsi_ORIENT_R0))&"um" , _
                            "ZPosition:=", cstr(MetalHeight(iMetalIndex))&"um", _
                            "XSize:=", cstr(rfvlsi_newOriginX(0, 0, strORIENT, fWidth, fLength, rfvlsi_ORIENT_R0)) &"um", _
                            "YSize:=", cstr(rfvlsi_newOriginY(0, 0, strORIENT, fWidth, fLength, rfvlsi_ORIENT_R0)) &"um", _
                            "ZSize:=", cstr(MetalThickness(iMetalIndex))&"um"), _
                            Array("NAME:Attributes", _
                            "Name:=", MetalName(iMetalIndex), _
                            "Flags:=", "", _
                            "Color:=", "(132 132 193)", _
                            "Transparency:=", 0.75, _
                            "PartCoordinateSystem:=", "Global", _
                            "MaterialName:=",  MetalMaterial(iMetalIndex), _
                            "SolveInside:=", false)
                        
                            MetalCountPlusOne iMetalIndex
                        End If
		Next
	Next
End Sub

Sub CViaRect(strORIENT, iViaIndex, fOriginX, fOriginY, fWidth, fLength, iNumX, iNumY, fSpaceX, fSpaceY)			
	For iXCreateBox=0 To (iNumX-1) 
		For iYCreateBox=0 To (iNumY-1) 
			oEditor.CreateBox _
			Array("NAME:BoxParameters", _
			"XPosition:=", cstr(rfvlsi_newOriginX(fOriginX, fOriginY, strORIENT, (iXCreateBox*(fWidth+fSpaceX)), (iYCreateBox*(fLength+fSpaceY)), rfvlsi_ORIENT_R0)) &"um", _
			"YPosition:=", cstr(rfvlsi_newOriginY(fOriginX, fOriginY, strORIENT, (iXCreateBox*(fWidth+fSpaceX)), (iYCreateBox*(fLength+fSpaceY)), rfvlsi_ORIENT_R0)) &"um", _
			"ZPosition:=", Cstr(ViaHeight(iViaIndex))&"um", _
			"XSize:=", cstr(rfvlsi_newOriginX(0, 0, strORIENT, fWidth, fLength, rfvlsi_ORIENT_R0)) &"um", _
			"YSize:=", cstr(rfvlsi_newOriginY(0, 0, strORIENT, fWidth, fLength, rfvlsi_ORIENT_R0)) &"um", _
			"ZSize:=", Cstr(ViaThickness(iViaIndex))&"um"), _
			Array("NAME:Attributes", _
			"Name:=", ViaName(iViaIndex), _
			"Flags:=", "", _
			"Color:=", "(132 132 193)", _
			"Transparency:=", 0.75, _
			"PartCoordinateSystem:=", "Global", _
			"MaterialName:=",  ViaMaterial(iViaIndex), _
			"SolveInside:=", false)
                        
                         ViaCountPlusOne iViaIndex
		Next
	Next
End Sub

Sub CMetalPolygon(iMetalIndex,hfss_ThicknessFactor,XArray,YArray)
	Dim strPolyname
	Dim iNumPts
	iNumPts=UBound(XArray)+1
	Dim arrayPolyLinePoints
	Redim arrayPolyLinePoints(iNumPts)' staring from index 0,point1, ... , pointLast

	Dim iPts
	arrayPolyLinePoints(0)="NAME:PolylinePoints"
	For iPts=1 To (iNumPts) 
		arrayPolylinePoints(iPts)=Array("NAME:PLPoint", "X:=", XArray(iPts-1)&"um", "Y:=",  YArray(iPts-1)&"um", "Z:=", Cstr(MetalHeight(iMetalIndex))&"um")
	Next
	
	Dim arrayPolyLineSegments
	Redim arrayPolyLineSegments(iNumPts-1)
	arrayPolyLineSegments(0)="NAME:PolylineSegments"
	For iPts=1 To (iNumPts-1) 
		arrayPolyLineSegments(iPts)=Array("NAME:PLSegment", "SegmentType:=", "Line", "StartIndex:=", iPts-1, "NoOfPoints:=", iNumPts-2)
	Next

	idPolyShape = oEditor.CreatePolyline(Array("NAME:PolylineParameters", "IsPolylineCovered:=", true, "IsPolylineClosed:=",  true, arrayPolylinePoints, arrayPolyLineSegments), _
	Array("NAME:Attributes", "Name:=", MetalName(iMetalIndex), "Flags:=", "", "Color:=",  "(132 132 193)", "Transparency:=", 0, "PartCoordinateSystem:=", "Global", "UDMId:=", "", "MaterialValue:=", Chr(34)&"vacuum"&Chr(34), "SolveInside:=", true))

	oEditor.ThickenSheet Array("NAME:Selections", "Selections:=", idPolyShape, "NewPartsModelFlag:=",  _
	  "Model"), Array("NAME:SheetThickenParameters", "Thickness:=", Cstr(hfss_ThicknessFactor&MetalThickness(iMetalIndex))&"um", "BothSides:=",  _
	  false)

	oEditor.AssignMaterial Array("NAME:Selections", "Selections:=", idPolyShape), Array("NAME:Attributes", "MaterialValue:=",  _
	  Chr(34)&MetalMaterial(iMetalIndex)&Chr(34), "SolveInside:=", false)
        
        MetalCountPlusOne iMetalIndex
End Sub

Sub CViaPolygon(iViaIndex,hfss_ThicknessFactor,XArray,YArray)
	Dim strPolyname
	Dim iNumPts
	iNumPts=UBound(XArray)+1
	Dim arrayPolyLinePoints
	Redim arrayPolyLinePoints(iNumPts)' staring from index 0,point1, ... , pointLast

	Dim iPts
	arrayPolyLinePoints(0)="NAME:PolylinePoints"
	For iPts=1 To (iNumPts) 
		arrayPolylinePoints(iPts)=Array("NAME:PLPoint", "X:=", XArray(iPts-1)&"um", "Y:=",  YArray(iPts-1)&"um", "Z:=", Cstr(ViaHeight(iViaIndex))&"um")
	Next
	
	Dim arrayPolyLineSegments
	Redim arrayPolyLineSegments(iNumPts-1)
	arrayPolyLineSegments(0)="NAME:PolylineSegments"
	For iPts=1 To (iNumPts-1) 
		arrayPolyLineSegments(iPts)=Array("NAME:PLSegment", "SegmentType:=", "Line", "StartIndex:=", iPts-1, "NoOfPoints:=", iNumPts-2)
	Next

	idPolyShape = oEditor.CreatePolyline( _
	Array("NAME:PolylineParameters", _
	"IsPolylineCovered:=", true, _
	"IsPolylineClosed:=",  true, _
	arrayPolylinePoints, _
	arrayPolyLineSegments), _ 
	Array("NAME:Attributes", "Name:=", ViaName(iViaIndex), "Flags:=", "", "Color:=",  "(132 132 193)", "Transparency:=", 0, "PartCoordinateSystem:=", "Global", "UDMId:=", "", "MaterialValue:=", Chr(34)&"vacuum"&Chr(34), "SolveInside:=", true))

	oEditor.ThickenSheet Array("NAME:Selections", "Selections:=", idPolyShape, "NewPartsModelFlag:=",  _
	  "Model"), Array("NAME:SheetThickenParameters", "Thickness:=", Cstr(hfss_ThicknessFactor&ViaThickness(iViaIndex))&"um", "BothSides:=",  _
	  false)

	oEditor.AssignMaterial Array("NAME:Selections", "Selections:=", idPolyShape), Array("NAME:Attributes", "MaterialValue:=",  _
	  Chr(34)&ViaMaterial(iViaIndex)&Chr(34), "SolveInside:=", false)
          
       ViaCountPlusOne iViaIndex
End Sub

Sub DefineNewMetal(metal_name, conductivity)
Set oDefinitionManager = oProject.GetDefinitionManager()
oDefinitionManager.AddMaterial _
    Array("NAME:" & metal_name, _
    "CoordinateSystemType:=","Cartesian",_
    "conductivity:=", conductivity)
End Sub

Sub CDielectric(dielectric_name, permitivity, conductivity, losstangent, fOriginX, fOriginY, fOriginZ, fWidth, fLength, fThickness, priority)
If (rfvlsi_em_sim_piority\<=priority) Then
    Set oDefinitionManager = oProject.GetDefinitionManager()
    oDefinitionManager.AddMaterial _
        Array("NAME:" & dielectric_name, _
        "CoordinateSystemType:=","Cartesian",_
        "permittivity:=", permitivity, _
        "conductivity:=", conductivity, _
        "dielectric_loss_tangent:=", losstangent)

    oEditor.CreateBox _
            Array("NAME:BoxParameters", _
                "XPosition:=", cstr(fOriginX) & "um", _
                "YPosition:=", cstr(fOriginY) & "um", _
                "ZPosition:=", cstr(fOriginZ) & "nm", _
                "XSize:=", cstr(fWidth) &"um", _
                "YSize:=", cstr(fLength) &"um", _
                "ZSize:=", cstr(fThickness) &"nm"), _
            Array("NAME:Attributes", _
                "Name:=", dielectric_name, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 0.1, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=",  dielectric_name, _
                "SolveInside:=", true)
    End If
End Sub

Sub CBoundary(X0, Y0, Z0, XSize, YSize, ZSize, priority)
    If rfvlsi_em_sim_piority\<= priority Then
        oEditor.CreateBox _
            Array("NAME:BoxParameters", _
            "XPosition:=", cstr(X0)&"um" , _
            "YPosition:=", cstr(Y0)&"um" , _
            "ZPosition:=", cstr(Z0)&"um", _
            "XSize:=", cstr(XSize) &"um", _
            "YSize:=", cstr(YSize) &"um", _
            "ZSize:=", cstr(ZSize) &"um"), _
            Array("NAME:Attributes", _
            "Name:=", "RadiationBoundary", _
            "Flags:=", "", _
            "Color:=", "(132 132 193)", _
            "Transparency:=", 0.05, _
            "PartCoordinateSystem:=", "Global", _
            "MaterialName:=",  "Air", _
            "SolveInside:=", True)

        Set oModule = oDesign.GetModule("BoundarySetup")
        oModule.AssignRadiation _
            Array("NAME:RadiationBoundary", _
            "Objects:=", Array("RadiationBoundary"))

        oProject.Save
    End If
End Sub

Sub CVport(portName,X1,Y1, X2, Y2, Width, strAxis, iMetalStart, iMetalStop, priority)
    If (rfvlsi_em_sim_piority\<=priority) Then
        If strAxis="X" Then
            oEditor.CreateRectangle _
                Array("NAME:RectangleParameters", _
                "IsCovered:=", true, _
                "XStart:=", Cstr(X1) & "um", _
                "YStart:=", Cstr(Y1) &"um", _
                "ZStart:=", Cstr(MetalHeight(iMetalStart)) & "um", _
                "Width:=", Cstr(Width) & "um", _
                "Height:=", Cstr(MetalHeight(iMetalStop)+MetalThickness(iMetalStop)-MetalHeight(iMetalStart))&"um", _
                "WhichAxis:=", strAxis), _
                Array("NAME:Attributes", _
                "Name:=", "sheet_" &portName, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 5.000000e-001, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=", "vacuum", _
                "SolveInside:=", true)
        Else
            oEditor.CreateRectangle _
                Array("NAME:RectangleParameters", _
                "IsCovered:=", true, _
                "XStart:=", Cstr(X1) & "um", _
                "YStart:=", Cstr(Y1) &"um", _
                "ZStart:=", Cstr(MetalHeight(iMetalStart)) & "um", _
                "Width:=", Cstr(MetalHeight(iMetalStop)+MetalThickness(iMetalStop)-MetalHeight(iMetalStart))&"um", _
                "Height:=", Cstr(Width) & "um", _
                "WhichAxis:=", strAxis), _
                Array("NAME:Attributes", _
                "Name:=", "sheet_" &portName, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 5.000000e-001, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=", "vacuum", _
                "SolveInside:=", true)
        End If

        Set oModule = oDesign.GetModule("BoundarySetup")

        oModule.AssignLumpedPort Array("NAME:"&portName, "Objects:=", Array("sheet_" &portName), "RenormalizeAllTerminals:=",  _
          true, Array("NAME:Modes", Array("NAME:Mode1", "ModeNum:=", 1, "UseIntLine:=", true, Array("NAME:IntLine", "Start:=", Array( _
          Cstr((X1+X2)/2) & "um", Cstr((Y1+Y2)/2) & "um", Cstr(MetalHeight(iMetalStart)) & "um"), "End:=", Array(Cstr((X1+X2)/2) & "um",  _
          Cstr((Y1+Y2)/2) & "um", Cstr(MetalHeight(iMetalStop)+MetalThickness(iMetalStop)) & "um")), "CharImp:=", "Zpi", "RenormImp:=",  _
          "50ohm")), "ShowReporterFilter:=", false, "ReporterFilter:=", Array(true), "FullResistance:=",  _
          "50ohm", "FullReactance:=", "0ohm")

        'Below is for driven-terminal simulatoin.
        'Dim faceID 
        'faceID=oEditor.GetFaceByPosition(Array("NAME:Parameters", _
        '"BodyName:=", "sheet_" &portName, "XPosition:=", Cstr((X1+X2)/2)&"um", "YPosition:=", _
        'Cstr((Y1+Y2)/2)&"um", "ZPosition:=",  Cstr(MetalHeight(iMetalStop)+(MetalThickness(iMetalStop)-MetalHeight(iMetalStart))/2)&"um"))
        'oModule.AutoIdentifyPorts Array("NAME:Faces", faceID), false, Array("NAME:ReferenceConductors",  _
        '  MetalName(iMetalStart)), portName, true

        'oModule.AssignTerminal Array("NAME:" & portName & "_T1", "Objects:=", Array("sheet_" &portName), "ParentBndID:=",  _
        '  portName, "TerminalResistance:=", "50ohm")

        oProject.Save
    End If    
End Sub


Sub CHport(portName,X0,Y0, Width, Xi1, Yi1, Xi2,Yi2,iMetal, Axis, priority)
MsgBox Cstr(X0) & ":" & Cstr(Y0)
MsgBox Width
MsgBox Cstr(Xi1)&":"&Cstr(Yi1)
MsgBox  Cstr(Xi2)&":"&Cstr(Yi2)
    If (rfvlsi_em_sim_piority\<=priority) Then
        If(Axis="X") Then
            oEditor.CreateRectangle _
                Array("NAME:RectangleParameters", _
                "IsCovered:=", true, _
                "XStart:=", Cstr(X0) & "um", _
                "YStart:=", Cstr(Y0) &"um", _
                "ZStart:=", Cstr(MetalHeight(iMetal)) & "um", _
                "Width:=", Cstr(Width) & "um", _
                "Height:=", Cstr(MetalThickness(iMetal))&"um", _
                "WhichAxis:=", Axis), _
                Array("NAME:Attributes", _
                "Name:=", "sheet_" &portName, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 5.000000e-001, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=", "vacuum", _
                "SolveInside:=", true)
        Else
             oEditor.CreateRectangle _
                Array("NAME:RectangleParameters", _
                "IsCovered:=", true, _
                "XStart:=", Cstr(X0) & "um", _
                "YStart:=", Cstr(Y0) &"um", _
                "ZStart:=", Cstr(MetalHeight(iMetal)) & "um", _
                "Width:=", Cstr(MetalThickness(iMetal))&"um", _
                "Height:=", Cstr(Width) & "um", _
                "WhichAxis:=", Axis), _
                Array("NAME:Attributes", _
                "Name:=", "sheet_" &portName, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 5.000000e-001, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=", "vacuum", _
                "SolveInside:=", true)       
        End If
        Set oModule = oDesign.GetModule("BoundarySetup")
        oModule.AssignLumpedPort Array("NAME:"&portName, "Objects:=", Array("sheet_" &portName), "RenormalizeAllTerminals:=",  _
          true, Array("NAME:Modes", Array("NAME:Mode1", "ModeNum:=", 1, "UseIntLine:=", true, Array("NAME:IntLine", "Start:=", Array( _
          Cstr(Xi1) & "um", Cstr(Yi1) & "um", Cstr(MetalHeight(iMetal)+(MetalThickness(iMetal))/2) & "um"), "End:=", Array(Cstr(Xi2) & "um",  _
          Cstr(Yi2) & "um", Cstr(MetalHeight(iMetal)+(MetalThickness(iMetal))/2) & "um")), "CharImp:=", "Zpi", "RenormImp:=",  _
          "50ohm")), "ShowReporterFilter:=", false, "ReporterFilter:=", Array(true), "FullResistance:=",  _
          "50ohm", "FullReactance:=", "0ohm")

        oProject.Save
    End If    
End Sub

Sub CHportXY(portName,X0,Y0, Width, Height, Xi1, Yi1, Xi2,Yi2,iMetal, priority)


    If (rfvlsi_em_sim_piority\<=priority) Then
            oEditor.CreateRectangle _
                Array("NAME:RectangleParameters", _
                "IsCovered:=", true, _
                "XStart:=", Cstr(X0) & "um", _
                "YStart:=", Cstr(Y0) &"um", _
                "ZStart:=", Cstr(MetalHeight(iMetal)+MetalThickness(iMetal)) & "um", _
                "Width:=", Cstr(Width) & "um", _
                "Height:=", Cstr(Height)&"um", _
                "WhichAxis:=", "Z"), _
                Array("NAME:Attributes", _
                "Name:=", "sheet_" &portName, _
                "Flags:=", "", _
                "Color:=", "(132 132 193)", _
                "Transparency:=", 5.000000e-001, _
                "PartCoordinateSystem:=", "Global", _
                "MaterialName:=", "vacuum", _
                "SolveInside:=", true)
    
        Set oModule = oDesign.GetModule("BoundarySetup")
        oModule.AssignLumpedPort Array("NAME:"&portName, "Objects:=", Array("sheet_" &portName), "RenormalizeAllTerminals:=",  _
          true, Array("NAME:Modes", Array("NAME:Mode1", "ModeNum:=", 1, "UseIntLine:=", true, Array("NAME:IntLine", "Start:=", Array( _
          Cstr(Xi1) & "um", Cstr(Yi1) & "um", Cstr(MetalHeight(iMetal)+(MetalThickness(iMetal))) & "um"), "End:=", Array(Cstr(Xi2) & "um",  _
          Cstr(Yi2) & "um", Cstr(MetalHeight(iMetal)+(MetalThickness(iMetal))) & "um")), "CharImp:=", "Zpi", "RenormImp:=",  _
          "50ohm")), "ShowReporterFilter:=", false, "ReporterFilter:=", Array(true), "FullResistance:=",  _
          "50ohm", "FullReactance:=", "0ohm")

        oProject.Save
    End If    
End Sub

'Orientation Constant Definition:
Const rfvlsi_ORIENT_R0 = 0
Const rfvlsi_ORIENT_R90 = 1
Const rfvlsi_ORIENT_R180 = 2
Const rfvlsi_ORIENT_R270 = 3
Const rfvlsi_ORIENT_MX = 4
Const rfvlsi_ORIENT_MXR90 = 5
Const rfvlsi_ORIENT_MY = 6
Const rfvlsi_ORIENT_MYR90 = 7

Dim rfvlsiHFSS_RotateR0By
Dim rfvlsiHFSS_RotateR90By
Dim rfvlsiHFSS_RotateR180By
Dim rfvlsiHFSS_RotateR270By
Dim rfvlsiHFSS_RotateMXBy
Dim rfvlsiHFSS_RotateMXR90By
Dim rfvlsiHFSS_RotateMYBy
Dim rfvlsiHFSS_RotateMYR90By

rfvlsiHFSS_RotateR0By=Array(0,1,2,3,4,5,6,7)
rfvlsiHFSS_RotateR90By=Array(1,2,3,0,7,4,5,6)
rfvlsiHFSS_RotateR180By=Array(2,3,0,1,6,7,4,5)
rfvlsiHFSS_RotateR270By=Array(3,0,1,2,5,6,7,4)
rfvlsiHFSS_RotateMXBy=Array(4,5,6,7,0,1,2,3)
rfvlsiHFSS_RotateMXR90By=Array(5,6,7,4,3,0,1,2)
rfvlsiHFSS_RotateMYBy=Array(6,7,4,5,2,3,0,1)
rfvlsiHFSS_RotateMYR90By=Array(7,4,5,6,1,2,3,0)


Function rfvlsiHFSS_ThicknessFactor(rfvlsiHFSS_ORIENT)
	
	Select Case rfvlsiHFSS_ORIENT
      Case rfvlsi_ORIENT_R0
		rfvlsiHFSS_ThicknessFactor=""
      Case rfvlsi_ORIENT_R90
		rfvlsiHFSS_ThicknessFactor=""
      Case rfvlsi_ORIENT_R180
		rfvlsiHFSS_ThicknessFactor=""
      Case rfvlsi_ORIENT_R270
		rfvlsiHFSS_ThicknessFactor=""
      Case rfvlsi_ORIENT_MX
		rfvlsiHFSS_ThicknessFactor="-"
      Case rfvlsi_ORIENT_MXR90
		rfvlsiHFSS_ThicknessFactor="-"
      Case rfvlsi_ORIENT_MY
		rfvlsiHFSS_ThicknessFactor="-"
	  Case Else
		rfvlsiHFSS_ThicknessFactor="-"
   End Select
   
End Function

Function rfvlsi_newORIENT(orient1, orient2)
      Select Case orient2
      Case rfvlsi_ORIENT_R0
		rfvlsi_newORIENT=rfvlsiHFSS_RotateR0By(orient1)
      Case rfvlsi_ORIENT_R90
		rfvlsi_newORIENT=rfvlsiHFSS_RotateR90By(orient1)
      Case rfvlsi_ORIENT_R180
		rfvlsi_newORIENT=rfvlsiHFSS_RotateR180By(orient1)
      Case rfvlsi_ORIENT_R270
		rfvlsi_newORIENT=rfvlsiHFSS_RotateR270By(orient1)
      Case rfvlsi_ORIENT_MX
		rfvlsi_newORIENT=rfvlsiHFSS_RotateMXBy(orient1)
      Case rfvlsi_ORIENT_MXR90
		rfvlsi_newORIENT=rfvlsiHFSS_RotateMXR90By(orient1)
      Case rfvlsi_ORIENT_MY
		rfvlsi_newORIENT=rfvlsiHFSS_RotateMYBy(orient1)
	  Case Else
		rfvlsi_newORIENT=rfvlsiHFSS_RotateMYR90By(orient1)
   End Select
End Function

Function rfvlsi_newOriginX(offsetX, offsetY, offset_ORIENT, originX, originY, origin_ORIENT)
	Select Case offset_ORIENT
      Case rfvlsi_ORIENT_R0
		rfvlsi_newOriginX=offsetX+originX
      Case rfvlsi_ORIENT_R90
		rfvlsi_newOriginX=offsetX-originY
      Case rfvlsi_ORIENT_R180
		rfvlsi_newOriginX=offsetX-originX
      Case rfvlsi_ORIENT_R270
		rfvlsi_newOriginX=offsetX+originY
      Case rfvlsi_ORIENT_MX
		rfvlsi_newOriginX=offsetX+originX
      Case rfvlsi_ORIENT_MXR90
		rfvlsi_newOriginX=offsetX+originY
      Case rfvlsi_ORIENT_MY
		rfvlsi_newOriginX=offsetX-originX
	  Case Else
		rfvlsi_newOriginX=offsetX-originY
   End Select
End Function

Function rfvlsi_newOriginY(offsetX, offsetY, offset_ORIENT, originX, originY, origin_ORIENT)
	Select Case offset_ORIENT
      Case rfvlsi_ORIENT_R0
		rfvlsi_newOriginY=offsetY+originY
      Case rfvlsi_ORIENT_R90
		rfvlsi_newOriginY=offsetY+originX
      Case rfvlsi_ORIENT_R180
		rfvlsi_newOriginY=offsetY-originY
      Case rfvlsi_ORIENT_R270
		rfvlsi_newOriginY=offsetY-originX
      Case rfvlsi_ORIENT_MX
		rfvlsi_newOriginY=offsetY-originY
      Case rfvlsi_ORIENT_MXR90
		rfvlsi_newOriginY=offsetY+originX
      Case rfvlsi_ORIENT_MY
		rfvlsi_newOriginY=offsetY+originY
	  Case Else
		rfvlsi_newOriginY=offsetY-originX
   End Select
End Function

>>
